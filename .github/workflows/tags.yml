name: Add tags

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  tag:
    runs-on: ubuntu-24.04

    steps:
      # Checkout the Repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Terraform Initialization
      - name: Initialize Terraform
        run: terraform init

      # Terraform Formatting Check
      - name: Check Terraform Formatting
        run: |
          terraform fmt -recursive -check || echo "Formatting issues detected !!!"

      # Terraform Validation
      - name: Validate Terraform Configuration
        run: terraform validate

      # Setup the Python Environment
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.5

      # Install Bandit
      - name: Install Bandit
        run: pip install bandit

      # Run bandit check
      - name: run Bandit Security scan
        run: |
          bandit -r . --skip B101
        continue-on-error: false #fail the workflow if Bandit finds critical issues

      # Git Setup
      - name: Set up Git
        run: |
          git config --global user.name 'Arpita Patnaik'
          git config --global user.email 'arpita.10718326@ltimindtree.com'   
          
      # Fetch all tags
      - name: Fetch tags
        run: git fetch --tags


      # Get the current version
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "Current version: $VERSION"
          echo "::set-output name=VERSION::$VERSION"

      # Calculate the next version
      - name: calculate the next version
        id: increment_version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          IFS='.' read -r -a VERSION_PARTS <<< "${VERSION#v}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"

      # Create and push the new tag
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.increment_version.outputs.NEW_VERSION }}
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      # YAML Lint      
      - name: Install yamllint
        run: sudo apt-get install -y yamllint
      
      - name: Run yamllint
        run: yamllint .

